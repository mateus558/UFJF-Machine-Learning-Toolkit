name: CMake

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TESTS_BUILD_TYPE: Debug

jobs:
  linux-build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install gnuplot
      run: sudo apt install gnuplot gnuplot-x11
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
  linux-tests:
    runs-on: ubuntu-latest
        
    steps:
    - uses: actions/checkout@v2

    - name: Install gnuplot
      run: sudo apt install gnuplot gnuplot-x11
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.TESTS_BUILD_TYPE}} -DENABLE_TESTING=ON
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.TESTS_BUILD_TYPE}}
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: xvfb-run ctest -C ${{env.TESTS_BUILD_TYPE}} --rerun-failed --output-on-failure
      
  codecov:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install gnuplot
      run: sudo apt install gnuplot gnuplot-x11

    - name: Install code coverage packages
      run: sudo apt install lcov gcovr

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.TESTS_BUILD_TYPE}} -DENABLE_TESTING=ON -DCODE_COVERAGE=ON -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage
    
    - name: Build and run code coverage
      run:  xvfb-run cmake --build ${{github.workspace}}/build --config ${{env.TESTS_BUILD_TYPE}} --target coverage
             
    - name: Generate codecov report
      run: | 
            lcov --capture --directory ${{github.workspace}}/build --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            lcov --list coverage.info
            bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
  macos-build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install gnuplot
      run: brew install gnuplot
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: CMake info
      run: cmake --help
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G "Visual Studio 16 2019" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

